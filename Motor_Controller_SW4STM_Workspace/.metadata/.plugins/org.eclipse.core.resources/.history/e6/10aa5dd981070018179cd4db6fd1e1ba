/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"
			
#include "../inc/UART/UART2.h"
#include "../inc/UART/UART3.h"
#include "../inc/UART/Parser.h"
#include "../inc/Motor/Motor.h"
#include "../inc/Motor/PID.h"

#include "../inc/define.h"

#include "stdio.h"

void init_components(void);



volatile char systick_happened;

typedef struct{

	struct{
		float new;
		float old;
	}position;

	struct{
		float new;
		float old;
	}vitesse;


	struct{
		float old;
		float new;
	}consigne_position;

	struct{
		float old;
		float new;
	}consigne_vitesse;

	struct{
		float old;
		float new;
	}erreur_position;

	struct{
		float old;
		float new;
	}erreur_vitesse;

	struct{
		float position;
		float vitesse;
	}integral;


	float pid;
}PID_t;

extern PID_t PID_1;
extern PID_t PID_2;
extern PID_t PID_3;
extern PID_t PID_4;

float PWM = 0.0;

int main(void)
{
	init_components();

	char s[1000];


	PID_reset();


	extern float motor_1_angular_velocity;
	extern float motor_2_angular_velocity;
	extern float motor_3_angular_velocity;
	extern float motor_4_angular_velocity;

	while(1){

		if(systick_happened == 1){

			systick_happened = 0;

			//PID_compute();
			compute_displacement_speed();

			sprintf(s,"PWM : <%f> Motor 1 : <%f> Motor 2 : <%f> Motor3 : <%f> Motor4 : <%f>\n",
					PWM,
					motor_1_angular_velocity,
					motor_2_angular_velocity,
					motor_3_angular_velocity,
					motor_1_angular_velocity);
			uart2_write_string(s);

			if(uart2_available()){
				if(uart2_read() == '#'){
					PWM += 0.005;
					motor1_set_speed((int)(PWM * 8399));
				}
			}
		}

//		if(uart3_available() != 0){
//			char v_byte = uart3_read();
//			uart2_write(v_byte);
//
//			if(parseMessage(v_byte) == 1){
//
//				if(g_messageId == 1){
//					signed char speed_x = g_messageContent[0];
//					signed char speed_y = g_messageContent[1];
//					signed char speed_r = g_messageContent[2];
//
//					if(speed_x < 15 && speed_x > -15) speed_x = 0;
//					if(speed_y < 15 && speed_y > -15) speed_y = 0;
//					if(speed_r < 15 && speed_r > -15) speed_r = 0;
//
//					signed char motor_1_speed = 0;
//					signed char motor_2_speed = 0;
//					signed char motor_3_speed = 0;
//					signed char motor_4_speed = 0;
//
//					motor_1_speed += speed_x;
//					motor_4_speed -= speed_x;
//
//					motor_2_speed += speed_y;
//					motor_3_speed -= speed_y;
//
//					motor_1_speed += speed_r;
//					motor_2_speed += speed_r;
//					motor_3_speed += speed_r;
//					motor_4_speed += speed_r;
//
//
//					motor1_set_speed(motor_1_speed);
//					motor2_set_speed(motor_2_speed);
//					motor3_set_speed(motor_3_speed);
//					motor4_set_speed(motor_4_speed);
//				}
//
//			}
//		}
	}

}



void init_components(){

	//init blue and red leds

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);

	GPIOD->ODR = 0;


	SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);	//Enables the FPU



	systick_happened = 0;

	uart2_init(115200);
	uart3_init(115200);


	SysTick_Config((SystemCoreClock  * CONTROL_LOOP_INTERVAL));

	motors_init();

}



void SysTick_Handler(void)
{
	systick_happened = 1;
}
