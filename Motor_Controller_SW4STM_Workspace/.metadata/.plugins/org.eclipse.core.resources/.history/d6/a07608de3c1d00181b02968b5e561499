#include "Motor/PID.h"

#include "ParameterManager/ParameterManager.h"
#include "Motor/Motor.h"
#include "define.h"
#include "stm32f4xx.h"

Encoder_t Encoder_1, Encoder_2, Encoder_3, Encoder_4;

PID_Position_t PID_Position_X, PID_Position_Y, PID_Position_R;

PID_Vitesse_t PID_Vitesse_1, PID_Vitesse_2, PID_Vitesse_3, PID_Vitesse_4;

type_deplacement g_typeDeplacement;


void PID_resetAll(void){
	PID_1_reset();
	PID_2_reset();
	PID_3_reset();
	PID_4_reset();
}




void Encoder_1_Compute(void){
	//Calcul de la nouvelle position

	Encoder_1.position += TICK_TO_CM(((int)(TIM1->CNT) - 32762));

	TIM1->CNT = 32762;
}

void Encoder_2_Compute(void){
	//Calcul de la nouvelle position

	Encoder_2.position += TICK_TO_CM(((int)(TIM2->CNT) - 32762));

	TIM2->CNT = 32762;
}

void Encoder_3_Compute(void){
	//Calcul de la nouvelle position

	Encoder_3.position += TICK_TO_CM(((int)(TIM3->CNT) - 32762));

	TIM3->CNT = 32762;
}

void Encoder_4_Compute(void){
	//Calcul de la nouvelle position

	Encoder_4.position += TICK_TO_CM(((int)(TIM4->CNT) - 32762));

	TIM4->CNT = 32762;
}



void PID_Position_X_Compute(void){

//Traitement de la nouvelle position et vitesse

	Encoder_1_Compute();

	Encoder_4_Compute();

//Asservissement en position

	PID_Position_X.position = 0.5 * (Encoder_1.position - Encoder_4.position);

	//PID_Position_X.position = Encoder_1.position;

	PID_Position_X.consigne_vitesse_old = PID_Position_X.consigne_vitesse;

	PID_Position_X.erreur_position_old  = PID_Position_X.erreur_position;


	PID_Position_X.erreur_position      = PID_Position_X.consigne_position - PID_Position_X.position;

	PID_Position_X.integral_position   += PID_Position_X.erreur_position * g_parameters.dt;

	float derivee_erreur_position = (PID_Position_X.erreur_position - PID_Position_X.erreur_position_old) / g_parameters.dt;

	PID_Position_X.consigne_vitesse = g_parameters.position_X_PKp * PID_Position_X.erreur_position    +
						     	 	  g_parameters.position_X_PKi * PID_Position_X.integral_position  +
									  g_parameters.position_X_PKd * derivee_erreur_position;
	//On limitte la vitesse

	if(PID_Position_X.consigne_vitesse > g_parameters.position_X_Vmax)
		PID_Position_X.consigne_vitesse = g_parameters.position_X_Vmax;

	if(PID_Position_X.consigne_vitesse < - g_parameters.position_X_Vmax)
		PID_Position_X.consigne_vitesse = - g_parameters.position_X_Vmax;

	//On limite l'acceleration

	float acceleration = (PID_Position_X.consigne_vitesse - PID_Position_X.consigne_vitesse_old)  / g_parameters.dt;

	if(acceleration > g_parameters.position_X_Amax)
		PID_Position_X.consigne_vitesse = PID_Position_X.consigne_vitesse_old + (g_parameters.position_X_Amax * g_parameters.dt);

	if(acceleration < - g_parameters.position_X_Amax)
		PID_Position_X.consigne_vitesse = PID_Position_X.consigne_vitesse_old - (g_parameters.position_X_Amax * g_parameters.dt);



//Asservissement en vitesse moteur 1

	Encoder_1.vitesse = (Encoder_1.position - Encoder_1.position_old) / g_parameters.dt;

	Encoder_1.position_old = Encoder_1.position;

	PID_Vitesse_1.erreur_vitesse_old = PID_Vitesse_1.erreur_vitesse;

	PID_Vitesse_1.erreur_vitesse = PID_Position_X.consigne_vitesse - Encoder_1.vitesse;

	float derivee_erreur_vitesse = (PID_Vitesse_1.erreur_vitesse - PID_Vitesse_1.erreur_vitesse_old) / g_parameters.dt;

	PID_Vitesse_1.integral_vitesse += PID_Vitesse_1.erreur_vitesse * g_parameters.dt;

	PID_Vitesse_1.pid_output = g_parameters.motor_1_VKp * PID_Vitesse_1.erreur_vitesse +
						   	   g_parameters.motor_1_VKi * PID_Vitesse_1.integral_vitesse +
							   g_parameters.motor_1_VKd * derivee_erreur_vitesse;

//Asservissement en vitesse moteur 4

	Encoder_4.vitesse = (Encoder_4.position - Encoder_4.position_old) / g_parameters.dt;

	Encoder_4.position_old = Encoder_4.position;

	PID_Vitesse_4.erreur_vitesse_old = PID_Vitesse_4.erreur_vitesse;

	PID_Vitesse_4.erreur_vitesse = -PID_Position_X.consigne_vitesse - Encoder_4.vitesse;

	derivee_erreur_vitesse = (PID_Vitesse_4.erreur_vitesse - PID_Vitesse_4.erreur_vitesse_old) / g_parameters.dt;

	PID_Vitesse_4.integral_vitesse += PID_Vitesse_4.erreur_vitesse * g_parameters.dt;

	PID_Vitesse_4.pid_output = g_parameters.motor_1_VKp * PID_Vitesse_4.erreur_vitesse +
						   	   g_parameters.motor_1_VKi * PID_Vitesse_4.integral_vitesse +
							   g_parameters.motor_1_VKd * derivee_erreur_vitesse;




//On set la commande calculée au moteurs

	motor1_set_speed_percent(PID_Vitesse_1.pid_output);


	motor4_set_speed_percent(PID_Vitesse_4.pid_output);


//On arrête le pid si l'erreur sur la position est moins de un 1mm

	if(((PID_Position_X.erreur_position > 0.0)? PID_Position_X.erreur_position : - PID_Position_X.erreur_position ) < 0.1){
			PID_Position_X_reset();
			extern char finit;
			finit = 1;

	}

}

void PID_Position_Y_Compute(void){

}

void PID_Position_Z_Compute(void){

}








void PID_Position_X_reset(void){

	motor1_set_speed_percent(0.0);
	motor4_set_speed_percent(0.0);

	Encoder_1.position = 0.0;
	Encoder_1.position_old = 0.0;
	Encoder_1.vitesse = 0.0;


	Encoder_4.position = 0.0;
	Encoder_4.position_old = 0.0;
	Encoder_4.vitesse = 0.0;


	PID_Position_X.consigne_position = 0.0;
	PID_Position_X.position = 0.0;
	PID_Position_X.position_old = 0.0;
	PID_Position_X.erreur_position = 0.0;
	PID_Position_X.erreur_position_old = 0.0;
	PID_Position_X.integral_position = 0.0;
	PID_Position_X.consigne_vitesse = 0.0;
	PID_Position_X.consigne_vitesse_old = 0.0;

	PID_Vitesse_1.erreur_vitesse = 0.0;
	PID_Vitesse_1.erreur_vitesse_old = 0.0;
	PID_Vitesse_1.integral_vitesse = 0.0;
	PID_Vitesse_1.pid_output = 0.0;

	PID_Vitesse_4.erreur_vitesse = 0.0;
	PID_Vitesse_4.erreur_vitesse_old = 0.0;
	PID_Vitesse_4.integral_vitesse = 0.0;
	PID_Vitesse_4.pid_output = 0.0;

	TIM1->CNT 					= 32762;
	TIM4->CNT 					= 32762;
}

