#include "../../inc/Motor/Position.h"

#include "stm32f4xx.h"

typedef struct{
	struct{
		int delta;
		int total;
	}tick_count;

	struct{
		float new;
		float old;
	}displacement; // m

	struct{
		float new;
		float old;
	}speed;        // m/s

	struct{
		float new;
		float old;
	}acceleration;  // m/s^2

}motor_t;


static motor_t motor_1;
static motor_t motor_2;
static motor_t motor_3;
static motor_t motor_4;

void position_reset(void){
	motor_1.tick_count.delta = 0;
	motor_1.tick_count.total = 0;
	motor_1.displacement     = 0.0;
	motor_1.acceleration     = 0.0;

	motor_2.tick_count.delta = 0;
	motor_2.tick_count.total = 0;
	motor_2.displacement     = 0.0;
	motor_2.acceleration     = 0.0;

	motor_3.tick_count.delta = 0;
	motor_3.tick_count.total = 0;
	motor_3.displacement     = 0.0;
	motor_3.acceleration     = 0.0;

	motor_4.tick_count.delta = 0;
	motor_4.tick_count.total = 0;
	motor_4.displacement     = 0.0;
	motor_4.acceleration     = 0.0;
}

void position_compute_iteration(void){
	/*
	 * On lit la valeur du compteur à chaque itération pour trouver le déplacement de l'axe du moteur depuis
	 * la dernière itération. On reset la valeur du compteur à 32726 qui se trouve à être la moitié de 65 535,
	 * la valeur maximale d'un nombre à 16 bits (largeur des compteurs). Le fait de forcer le compteur à cette
	 * valeur à chaque itération fait en sorte qu'on a pas besoin de tenir en compte les situa
	 */
		uint16_t motor_1_tick = TIM1->CNT;
		TIM1->CNT = 32762;

		uint16_t motor_2_tick = TIM2->CNT;
		TIM2->CNT = 32762;

		uint16_t motor_3_tick = TIM3->CNT;
		TIM3->CNT = 32762;

		uint16_t motor_4_tick = TIM4->CNT;
		TIM4->CNT = 32762;

	/*
	 *	Compute the displacement of the motor by taking the difference from the motor counter value and the
	 *	reset value 32762
	 */
		motor_1.tick_count.delta = (int)motor_1_tick - 32762;
		motor_2.tick_count.delta = (int)motor_2_tick - 32762;
		motor_3.tick_count.delta = (int)motor_3_tick - 32762;
		motor_4.tick_count.delta = (int)motor_4_tick - 32762;

		motor_1.tick_count.total += motor_1.tick_count.delta;
		motor_2.tick_count.total += motor_2.tick_count.delta;
		motor_3.tick_count.total += motor_3.tick_count.delta;
		motor_4.tick_count.total += motor_4.tick_count.delta;

		float motor_1_delta_displacement = motor_1.tick_count.delta / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;
		float motor_2_delta_displacement = motor_2.tick_count.delta / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;
		float motor_3_delta_displacement = motor_3.tick_count.delta / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;
		float motor_4_delta_displacement = motor_4.tick_count.delta / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;



		motor_1.displacement += motor_1_delta_displacement;
		motor_2.displacement += motor_2_delta_displacement;
		motor_3.displacement += motor_3_delta_displacement;
		motor_4.displacement += motor_4_delta_displacement;

		motor_1.speed = motor_1_delta_displacement / CONTROL_LOOP_INTERVAL;
		motor_2.speed = motor_2_delta_displacement / CONTROL_LOOP_INTERVAL;
		motor_3.speed = motor_3_delta_displacement / CONTROL_LOOP_INTERVAL;
		motor_4.speed = motor_4_delta_displacement / CONTROL_LOOP_INTERVAL;


}

void angulat_speed_compute(void){


}

