#include "../../inc/Motor/PID.h"
#include "../../inc/Motor/Motor.h"
#include "stm32f4xx.h"
#include "../../inc/define.h"


typedef struct{

	float position;

	struct{
		float old;
		float new;
	}consigne_position;

	struct{
		float old;
		float new;
	}consigne_vitesse;

	struct{
		float old;
		float new;
	}erreur_position;

	struct{
		float old;
		float new;
	}erreur_vitesse;

	struct{
		float position;
		float vitesse;
	}integral;


	float pid;
}PID_t;

PID_t pid_moteur_1;
PID_t pid_moteur_2;
PID_t pid_moteur_3;
PID_t pid_moteur_4;



void PID_reset(void){

	motor_1.displacement     = 0.0;
	motor_1.speed.new        = 0.0;
	motor_1.speed.old        = 0.0;
	motor_1.acceleration     = 0.0;

	motor_2.displacement     = 0.0;
	motor_2.speed.new        = 0.0;
	motor_2.speed.old        = 0.0;
	motor_2.acceleration     = 0.0;

	motor_3.displacement     = 0.0;
	motor_3.speed.new        = 0.0;
	motor_3.speed.old        = 0.0;
	motor_3.acceleration     = 0.0;

	motor_4.displacement     = 0.0;
	motor_4.speed.new        = 0.0;
	motor_4.speed.old        = 0.0;
	motor_4.acceleration     = 0.0;

	motor_1_pid.consigne_vitesse = 0.05; //m/s
}


void PID_compute(void){

	uint16_t motor_1_tick = TIM1->CNT;
	TIM1->CNT = 32762;
	uint16_t motor_2_tick = TIM2->CNT;
	TIM2->CNT = 32762;
	uint16_t motor_3_tick = TIM3->CNT;
	TIM3->CNT = 32762;
	uint16_t motor_4_tick = TIM4->CNT;
	TIM4->CNT = 32762;

	pid_moteur_1.position += ((float)((int)motor_1_tick - 32762)) * TICK_TO_METER;
	pid_moteur_2.position += ((float)((int)motor_2_tick - 32762)) * TICK_TO_METER;
	pid_moteur_3.position += ((float)((int)motor_3_tick - 32762)) * TICK_TO_METER;
	pid_moteur_4.position += ((float)((int)motor_4_tick - 32762)) * TICK_TO_METER;
}


void PID_attitude_compute(void){
	/*
	 * On lit la valeur du compteur à chaque itération pour trouver le déplacement de l'axe du moteur depuis
	 * la dernière itération. On reset la valeur du compteur à 32726 qui se trouve à être la moitié de 65 535,
	 * la valeur maximale d'un nombre à 16 bits (largeur des compteurs). Le fait de forcer le compteur à cette
	 * valeur à chaque itération fait en sorte qu'on a pas besoin de tenir en compte les situa
	 */


	/*
	 *	Compute the displacement of the motor by taking the difference from the motor counter value and the
	 *	reset value 32762
	 */



		int motor_1_delta_tick_count = (int)motor_1_tick - 32762;
		int motor_2_delta_tick_count = (int)motor_2_tick - 32762;
		int motor_3_delta_tick_count = (int)motor_3_tick - 32762;
		int motor_4_delta_tick_count = (int)motor_4_tick - 32762;

		float motor_1_delta_displacement = (float)motor_1_delta_tick_count
		float motor_2_delta_displacement = (float)motor_2_delta_tick_count / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;
		float motor_3_delta_displacement = (float)motor_3_delta_tick_count / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;
		float motor_4_delta_displacement = (float)motor_4_delta_tick_count / TICK_PER_ROTATION * WHEEL_DIAMETER * PI;

		motor_1.displacement += motor_1_delta_displacement;
		motor_2.displacement += motor_2_delta_displacement;
		motor_3.displacement += motor_3_delta_displacement;
		motor_4.displacement += motor_4_delta_displacement;

		motor_1.speed.old = motor_1.speed.new;
		motor_2.speed.old = motor_2.speed.new;
		motor_3.speed.old = motor_3.speed.new;
		motor_4.speed.old = motor_4.speed.new;

		motor_1.speed.new = motor_1_delta_displacement / CONTROL_LOOP_INTERVAL;
		motor_2.speed.new = motor_2_delta_displacement / CONTROL_LOOP_INTERVAL;
		motor_3.speed.new = motor_3_delta_displacement / CONTROL_LOOP_INTERVAL;
		motor_4.speed.new = motor_4_delta_displacement / CONTROL_LOOP_INTERVAL;

		motor_1.acceleration = (motor_1.speed.new - motor_1.speed.old) / CONTROL_LOOP_INTERVAL;
		motor_2.acceleration = (motor_2.speed.new - motor_2.speed.old) / CONTROL_LOOP_INTERVAL;
		motor_3.acceleration = (motor_3.speed.new - motor_3.speed.old) / CONTROL_LOOP_INTERVAL;
		motor_4.acceleration = (motor_4.speed.new - motor_4.speed.old) / CONTROL_LOOP_INTERVAL;

}

void PID_output_compute(void){
	motor_1_pid.consigne_vitesse_old = motor_1_pid.consigne_vitesse_new;    //Sauvegarde de l'ancienne consigne de vitesse
	motor_1_pid.erreur_position_old  = motor_1_pid.erreur_position_new;     //Sauvegarde de l'ancienne erreur de position
	motor_1_pid.erreur_position_new = motor_1_pid.consigne_position_new - motor_1.displacement;
	motor_1_pid.integral_position += motor_1_pid.erreur_position_new;
	motor_1_pid.consigne_vitesse_new = PKp * motor_1_pid.erreur_position_new +
									   PKi * motor_1_pid.integral_position +
									   PKd * (motor_1_pid.erreur_position_new - motor_1_pid.erreur_position_old);

	if(motor_1_pid.consigne_vitesse_new > Vmax) motor_1_pid.consigne_vitesse_new = Vmax;
	else if(motor_1_pid.consigne_vitesse_new < - Vmax) motor_1_pid.consigne_vitesse_new = - Vmax;


	motor_1_pid.erreur_old = motor_1_pid.erreur_new;
	motor_1_pid.erreur_new = motor_1_pid.consigne_vitesse - motor_1.speed.new;
	motor_1_pid.derivee = motor_1_pid.erreur_new - motor_1_pid.erreur_old;
	motor_1_pid.integral += motor_1_pid.erreur_new;
	motor_1_pid.pid = VKp * motor_1_pid.erreur_new +
					  VKi * motor_1_pid.integral +
					  VKd * motor_1_pid.derivee;
	motor1_set_speed((int)motor_1_pid.pid);
}
