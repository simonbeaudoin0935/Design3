#include "UART3.h"

#include "stm32f4xx_gpio.h"
#include "stm32f4xx_usart.h"

 
static volatile char uart3_rx_buf[UART3_RX_BUFF_SIZE];
static volatile char uart3_tx_buf[UART3_TX_BUFF_SIZE];

static volatile uint32_t uart3_rx_head;
static volatile uint32_t uart3_rx_tail;
static volatile uint32_t uart3_tx_head;
static volatile uint32_t uart3_tx_tail;


  
void uart3_init(uint32_t p_baud_rate){
  
  uart3_rx_head = 0;
  uart3_rx_tail = 0;
  uart3_tx_head = 0;
  uart3_tx_tail = 0;

  

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);                 //activer la clock du port B
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);                 //activer la clock du port D
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);                //Activer la clock pour le USART3

  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);            //Configurer la pin PB11 en fonction alternative USART3
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8,  GPIO_AF_USART3);            //Configurer la pin PD8 en fonction alternative USART3
  

  GPIO_InitTypeDef GPIO_InitStruct;
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_11;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOB, &GPIO_InitStruct);                                   //Initialiser la pin PB11 avec fonction alternative
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
  GPIO_Init(GPIOB, &GPIO_InitStruct);                                   //Initialiser la pin PD8 avec fonction alternative
  

  USART_InitTypeDef USART_InitStruct;
  USART_InitStruct.USART_BaudRate = p_baud_rate;
  USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;          //Mode full-duplex
  USART_InitStruct.USART_Parity = USART_Parity_No;                      //no parity
  USART_InitStruct.USART_StopBits = USART_StopBits_1;                   //1 stop bit
  USART_InitStruct.USART_WordLength = USART_WordLength_8b;              //8 bit 
  USART_Init(USART3, &USART_InitStruct);                                //Initialiser les paramètres du USART3

  USART_Cmd(USART3, ENABLE);                                            //Activer le UART 3
  

  USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);                        //Activer interruption RX Not Empty
  
  USART_ITConfig(USART2, USART_IT_TXE, ENABLE);                         //Activer interruption TX Empty
  

  NVIC_InitTypeDef NVIC_InitStruct;
  NVIC_InitStruct.NVIC_IRQChannel = USART3_IRQn;
  NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
  NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
  NVIC_Init(&NVIC_InitStruct);                                          //Initialiser le NVIC pour activer l'interruption du USART3
  
}

char uart3_read(void){
  
  //Si aucune données dans le rx buf, normalement ne devrait pas arriver car on appelle available()
  //pour connaitre le nombre de byte disponibles
  if(uart3_rx_head == uart3_rx_tail){
    return 0;
  }
  
  else{
    char c = uart3_rx_buf[uart3_rx_tail];                   //le prochain byte dans le buffer
    uart3_rx_tail = (uart3_rx_tail + 1) % UART3_RX_BUFF_SIZE;     //on incrémente la queue du buffer et on fait un wrap around
    return c;
  }
}

int uart3_available(){
  return (int) ((UART3_RX_BUFF_SIZE + uart3_rx_head - uart3_rx_tail) % UART3_RX_BUFF_SIZE); //retourne le nombre de byte dans le buffer
}

void uart3_write(char p_data){

  //Si le buffer est vide et que le TX_data_register aussi, on skip
  //le processus et on envoit directement le byte.
  if((uart3_tx_tail == uart3_tx_head) && (USART3->SR & USART_FLAG_TXE))
  {
    USART3->DR = p_data;
    return;
  }
  
  //sinon il y a des donnes dans le buffer ou le uart est en train de transferer le byte
  //mit dans le registre de transfert  mit lors de l'appel précédend en #1
  uint32_t v_index = (uart3_tx_head + 1) % UART3_TX_BUFF_SIZE;
  
  //on boucle tant que le buffer est plein.
  while(v_index == uart3_tx_tail)
  {
    //si on est en train de boucler ici, l'interruption de transfert finira pas arriver
    //et liberera un byte dans le buffer
  }
  
  uart3_tx_buf[uart3_tx_head] = p_data;                   //On place le byte dans le buffer
  
  uart3_tx_head = v_index;                                //On incrémente la tail
    
  USART3->CR1 |= USART_FLAG_TXE;                          //Active Transmit Empty interrupt, s'il ne l'est pas déjà
}


void uart3_write_string(char* p_string)
{  
  while(*p_string != 0)                                   //Tant qu'on a pas atteind la fin de la string
  {
    uart3_write(*p_string);                               //On écrit le char dans le buffer.
    
    p_string++;                                           //On incrémente
  }
  
}


void USART3_IRQHandler(void)
{ 
  if(USART3->SR & USART_FLAG_RXNE)                        //Si on a recu un byte
  {
    USART3->SR &= ~USART_FLAG_RXNE;                       //clear la source de linterrupt
    
    uart3_rx_buf[uart3_rx_head] = USART3->DR;             //On place le byte recu dans le buffer
    
    uart3_rx_head = (uart3_rx_head + 1) % UART3_RX_BUFF_SIZE;   //On incrémente l'indice de tête, et fait un wrap around;
  }
  
  if(USART3->SR & USART_FLAG_TXE)                         //if tx empty
  {            
    USART3->SR &= ~USART_FLAG_TXE;                        //On clear le flag
    
    if(uart3_tx_head != uart3_tx_tail)                    //Si il y a des bytes à envoyer dans le tx_buf
    { 
      USART3->DR = uart3_tx_buf[uart3_tx_tail];           //On envoit le prochain byte
      
      uart3_tx_tail = (uart3_tx_tail + 1) % UART3_TX_BUFF_SIZE; //On incrémente l'indice de queue, et fait un wrap around;
    }
    
    if(uart3_tx_head == uart3_tx_tail)                    //Si il n'y a plus de données dans le tx_buf
    {                   
      USART3->CR1 &= ~USART_FLAG_TXE;                     //on désactive les interruption du tx empty.
    }
  }
}
