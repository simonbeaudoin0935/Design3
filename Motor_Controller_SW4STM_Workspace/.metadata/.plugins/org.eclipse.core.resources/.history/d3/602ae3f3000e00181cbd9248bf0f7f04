#include "UART/UART.h"

void UART_init(UART p_uart, uint32_t p_baudRate){

	switch(p_uart){

		case UART1:
			//not implemented
			break;

		case UART2:
			UART2_init(p_baudRate);
			break;

		case UART3:
			UART3_init(p_baudRate);
			break;

		case UART4:
			//not implemented
			break;

		default:
			break;
	}
}

char UART_read(UART p_uart){

	char v_return = 0;

	switch(p_uart){

		case UART1:
			//not implemented
			break;

		case UART2:
			v_return = UART2_read();
			break;

		case UART3:
			v_return = UART3_read();
			break;

		case UART4:
			//not implemented
			break;

		default:
			break;
	}

	return v_return;

}

int  UART_available(UART p_uart){

	int v_return = 0;

	switch(p_uart){

		case UART1:
			//not implemented
			break;

		case UART2:
			v_return = UART2_available();
			break;

		case UART3:
			v_return = UART3_available();
			break;

		case UART4:
			//not implemented
			break;

		default:
			break;
	}

	return v_return;

}

void UART_write(UART p_uart, char p_data){

	switch(p_uart){

		case UART1:
			//not implemented
			break;

		case UART2:
			UART2_write(p_data);
			break;

		case UART3:
			UART3_write(p_data);
			break;

		case UART4:
			//not implemented
			break;

		default:
			break;
	}
}

void UART_print(UART p_uart, char* p_string){

	switch(p_uart){

		case UART1:
			//not implemented
			break;

		case UART2:
			UART2_print(p_string);
			break;

		case UART3:
			UART3_print(p_string);
			break;

		case UART4:
			//not implemented
			break;

		default:
			break;
	}
}

void UART_println(UART p_uart, char* p_string){

	switch(p_uart){

		case UART1:
			//not implemented
			break;

		case UART2:
			UART2_print(p_string);
			UART2_write('\n');
			break;

		case UART3:
			UART3_print(p_string);
			UART3_write('\n');
			break;

		case UART4:
			//not implemented
			break;

		default:
			break;
	}
}

void UART_writeFloat(UART p_uart, float p_float){

	union floatUnion_t{
		float floating;
		char  bytes[4];
	};

	void send_float_value(float p_value){
		float_t v_float;

		v_float.floating = p_value;

		uart2_write(v_float.bytes[0]);
		uart2_write(v_float.bytes[1]);
		uart2_write(v_float.bytes[2]);
		uart2_write(v_float.bytes[3]);
	}
}
