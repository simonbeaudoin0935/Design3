/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"
			
#include "../inc/UART/UART2.h"
#include "../inc/UART/UART3.h"
#include "../inc/UART/Parser.h"
#include "../inc/Motor/Motor.h"


volatile int motor_1_count_diff;
volatile int motor_2_count_diff;
volatile int motor_3_count_diff;
volatile int motor_4_count_diff;


typedef union{
	int integer;
	char bytes[sizeof(int)]; //[4]
}int_u;



int_u motor_1_total_count;
int_u motor_2_total_count;
int_u motor_3_total_count;
int_u motor_4_total_count;


#define TICK_PER_ROTATION 6400.0

volatile char systick_happened;

void init_blue_led();

int main(void)
{
	SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);	//Enables the FPU

	motor_1_total_count.integer = 0;
	motor_2_total_count.integer = 0;
	motor_3_total_count.integer = 0;
	motor_4_total_count.integer = 0;



	systick_happened = 0;

	uart2_init(115200);
	uart3_init(115200);

	init_blue_led();


	SysTick_Config((SystemCoreClock  * 0.01));

	motors_init();






	while(1){

		if(systick_happened == 1){

			systick_happened = 0;

			motor_1_total_count.integer += motor_1_count_diff;
			motor_2_total_count.integer += motor_2_count_diff;
			motor_3_total_count.integer += motor_3_count_diff;
			motor_4_total_count.integer += motor_4_count_diff;

			typedef union{
				float floating;
				char bytes[sizeof(float)]; //[4]
			}float_u;

			typedef union{
			    int integer;
			    char bytes[sizeof(int)]; //[4]
			}int_u;

			float_u motor_1_rps;
			float_u motor_2_rps;
			float_u motor_3_rps;
			float_u motor_4_rps;



			motor_1_rps.floating = ((float)motor_1_count_diff) / TICK_PER_ROTATION * 100.0;
			motor_2_rps.floating = ((float)motor_2_count_diff) / TICK_PER_ROTATION * 100.0;
			motor_3_rps.floating = ((float)motor_3_count_diff) / TICK_PER_ROTATION * 100.0;
			motor_4_rps.floating = ((float)motor_4_count_diff) / TICK_PER_ROTATION * 100.0;


			uart3_write('#');

			uart3_write(0x01);
			uart3_write(0x10);

			uart3_write(motor_1_total_count.bytes[0]);
			uart3_write(motor_1_total_count.bytes[1]);
			uart3_write(motor_1_total_count.bytes[2]);
			uart3_write(motor_1_total_count.bytes[3]);

			uart3_write(motor_2_total_count.bytes[0]);
			uart3_write(motor_2_total_count.bytes[1]);
			uart3_write(motor_2_total_count.bytes[2]);
			uart3_write(motor_2_total_count.bytes[3]);

			uart3_write(motor_3_total_count.bytes[0]);
			uart3_write(motor_3_total_count.bytes[1]);
			uart3_write(motor_3_total_count.bytes[2]);
			uart3_write(motor_3_total_count.bytes[3]);

			uart3_write(motor_4_total_count.bytes[0]);
			uart3_write(motor_4_total_count.bytes[1]);
			uart3_write(motor_4_total_count.bytes[2]);
			uart3_write(motor_4_total_count.bytes[3]);

			uart3_write('.');

			//*************************************

			uart3_write('#');

			uart3_write(0x02);
			uart3_write(0x10);

			uart3_write(motor_1_rps.bytes[0]);
			uart3_write(motor_1_rps.bytes[1]);
			uart3_write(motor_1_rps.bytes[2]);
			uart3_write(motor_1_rps.bytes[3]);

			uart3_write(motor_2_rps.bytes[0]);
			uart3_write(motor_2_rps.bytes[1]);
			uart3_write(motor_2_rps.bytes[2]);
			uart3_write(motor_2_rps.bytes[3]);

			uart3_write(motor_3_rps.bytes[0]);
			uart3_write(motor_3_rps.bytes[1]);
			uart3_write(motor_3_rps.bytes[2]);
			uart3_write(motor_3_rps.bytes[3]);

			uart3_write(motor_4_rps.bytes[0]);
			uart3_write(motor_4_rps.bytes[1]);
			uart3_write(motor_4_rps.bytes[2]);
			uart3_write(motor_4_rps.bytes[3]);

			uart3_write('.');
		}

		if(uart3_available() != 0){
			char v_byte = uart3_read();
			uart2_write(v_byte);

			if(parseMessage(v_byte) == 1){
				GPIOD->ODR ^= 0x4000;

				signed char speed_x = g_messageContent[0];
				signed char speed_y = g_messageContent[1];
				signed char speed_r = g_messageContent[2];

				if(speed_x < 15 && speed_x > -15) speed_x = 0;
				if(speed_y < 15 && speed_y > -15) speed_y = 0;
				if(speed_r < 15 && speed_r > -15) speed_r = 0;

				signed char motor_1_speed = 0;
				signed char motor_2_speed = 0;
				signed char motor_3_speed = 0;
				signed char motor_4_speed = 0;

				motor_1_speed += speed_x;
				motor_4_speed -= speed_x;

				motor_2_speed += speed_y;
				motor_3_speed -= speed_y;

				motor_1_speed += speed_r;
				motor_2_speed += speed_r;
				motor_3_speed += speed_r;
				motor_4_speed += speed_r;


				motor1_set_speed(motor_1_speed);
				motor2_set_speed(motor_2_speed);
				motor3_set_speed(motor_3_speed);
				motor4_set_speed(motor_4_speed);
			}
		}
	}

}

void init_blue_led(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);

	GPIOD->ODR = 0;
	//GPIOD->BSRRL = 0x8000; //set   PD1
}





void SysTick_Handler(void)
{
	GPIOD->ODR ^= 0x8000;


	systick_happened = 1;
}
