/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"

#include "../inc/ParameterManager/ParameterManager.h"
#include "../inc/UART/UART2.h"
#include "../inc/UART/UART3.h"
#include "../inc/UART/Parser.h"
#include "../inc/Motor/Motor.h"
#include "../inc/Motor/PID.h"


#include "../inc/define.h"


#include "stdio.h"







void init_components(void);
void execute_received_command(void);


volatile unsigned int systick_happened;
ParameterManager g_parameterManager();


extern Encodeur_t encodeur_1;
extern PID_t PID_1;

typedef union{
	float floating;
	char  bytes[4];
}float_t;

void send_float_value(float p_value){
	float_t v_float;

	v_float.floating = p_value;

	uart2_write(v_float.bytes[0]);
	uart2_write(v_float.bytes[1]);
	uart2_write(v_float.bytes[2]);
	uart2_write(v_float.bytes[3]);
}

float receive_float_value(char* adr){
	float_t v_float;

	v_float.bytes[0] = *adr; adr++;
	v_float.bytes[1] = *adr; adr++;
	v_float.bytes[2] = *adr; adr++;
	v_float.bytes[3] = *adr;

	return v_float.floating;
}


int main(void)
{
	init_components();

	char s[1000];


	PID_reset();


	while(1){
		if(uart2_available()){
			if(parseMessage(uart2_read()) == 1){
				execute_received_command();

			}
		}

		if(systick_happened == 1){

			systick_happened = 0;



			PID_compute();


			uart2_write('#');
			uart2_write(0x03);
			uart2_write(0x18); //to update


			send_float_value(Vmax);
			send_float_value(PID_1.consigne_position);
			send_float_value(PID_1.consigne_vitesse);
			send_float_value(PID_1.vitesse);
			send_float_value(encodeur_1.position);
			send_float_value(PID_1.pid * 100.0);


			uart2_write('.');





		}


	}

}

void execute_received_command(void){
	switch(g_messageId){

	case 0x01: //read
		uart2_write('#');
		uart2_write(0x04);
		uart2_write(0x18); //to update


		send_float_value(PKp);
		send_float_value(PKi);
		send_float_value(PKd);
		send_float_value(VKp);
		send_float_value(VKi);
		send_float_value(VKd);


		uart2_write('.');
		break;

	case 0x02: //store

		if(g_messageLength != 0x18) break;

		PKp = receive_float_value(g_messageContent);
		PKi = receive_float_value(g_messageContent + 4);
		PKd = receive_float_value(g_messageContent + 8);

		VKp = receive_float_value(g_messageContent + 12);
		VKi = receive_float_value(g_messageContent + 16);
		VKd = receive_float_value(g_messageContent + 20);
		break;

	case 0x03: //reset
		PID_reset();
		break;

	case 0x04: //
		break;

	case 0x05:
		break;

	default:
		break;
	}
}


void init_components(){

	//init blue and red leds

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);

	GPIOD->ODR = 0;


	SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);	//Enables the FPU



	systick_happened = 0;

	uart2_init(115200);
	uart3_init(115200);


	SysTick_Config((SystemCoreClock  * DELTA_TEMPS));

	motors_init();

}



void SysTick_Handler(void)
{
	systick_happened += 1;
}
