#include "stm32f4xx.h"
#include "ParameterManager/ParameterManager.h"
#include "UART/UART2.h"
#include "UART/UART3.h"
#include "UART/Parser.h"
#include "Motor/Motor.h"
#include "Motor/PID.h"
#include "define.h"
#include "stdio.h"







void init_components(void);
void execute_received_command(void);


volatile unsigned int systick_happened;

extern PID_t PID_1, PID_2, PID_3, PID_4;


typedef union{
	float floating;
	char  bytes[4];
}float_t;

void send_float_value(float p_value){
	float_t v_float;

	v_float.floating = p_value;

	uart2_write(v_float.bytes[0]);
	uart2_write(v_float.bytes[1]);
	uart2_write(v_float.bytes[2]);
	uart2_write(v_float.bytes[3]);
}

float receive_float_value(char* adr){
	float_t v_float;

	v_float.bytes[0] = *adr; adr++;
	v_float.bytes[1] = *adr; adr++;
	v_float.bytes[2] = *adr; adr++;
	v_float.bytes[3] = *adr;

	return v_float.floating;
}


int main(void)
{
	init_components();

	g_parameters.wheel_diameter = 6.58;
	storeParametersInEEPROM();





	while(1){

		if(uart2_available()){
			if(parseMessage(uart2_read()) == 1){
				execute_received_command();
				BLUE_LED_TOGGLE;
			}

		}

		if(systick_happened == 1){

			systick_happened = 0;

			PID_1_compute();
			PID_4_compute();

			uart2_write('#');
			uart2_write(0x03);
			uart2_write(0x18); //to update

			send_float_value(PID_1.consigne_vitesse);
			send_float_value(PID_4.consigne_vitesse * -1.0);
			send_float_value(PID_1.position * 0.1);
			send_float_value(PID_4.position * -0.1);
			send_float_value(PID_1.vitesse);
			send_float_value(PID_4.vitesse * -1.0);

			uart2_write('.');
		}
	}
}

void execute_received_command(void){
	switch(g_messageId){

	case 0x01: //read
		uart2_write('#');
		uart2_write(0x04);
		uart2_write(0x20); //to update


		send_float_value(g_parameters.motor_4_PKp);
		send_float_value(g_parameters.motor_4_PKi);
		send_float_value(g_parameters.motor_4_PKd);
		send_float_value(g_parameters.motor_4_VKp);
		send_float_value(g_parameters.motor_4_VKi);
		send_float_value(g_parameters.motor_4_VKd);
		send_float_value(g_parameters.motor_4_Amax);
		send_float_value(g_parameters.motor_4_Vmax);


		uart2_write('.');
		break;

	case 0x02: //store

		if(g_messageLength != 0x20) break;

		g_parameters.motor_4_PKp = receive_float_value(g_messageContent);
		g_parameters.motor_4_PKi = receive_float_value(g_messageContent + 4);
		g_parameters.motor_4_PKd = receive_float_value(g_messageContent + 8);

		g_parameters.motor_4_VKp = receive_float_value(g_messageContent + 12);
		g_parameters.motor_4_VKi = receive_float_value(g_messageContent + 16);
		g_parameters.motor_4_VKd = receive_float_value(g_messageContent + 20);

		g_parameters.motor_4_Amax = receive_float_value(g_messageContent + 24);
		g_parameters.motor_4_Vmax = receive_float_value(g_messageContent + 28);

		storeParametersInEEPROM();

		break;

	case 0x03: //reset
		PID_4_reset();
		PID_4.consigne_position = -100.0;
		PID_1_reset();
		PID_1.consigne_position = 100.0;

		break;

	case 0x04: //
		break;

	case 0x05:
		break;

	default:
		break;
	}
}


void init_components(){

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);	//init blue and red leds
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);

	SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);			//Enables the FPU

	systick_happened = 0;									//Reset the timer flag

	uart2_init(115200);										//init uart2

	uart3_init(115200);										//init uart3

	initEEPROM();											//init eeprom

	loadParametersFromEEPROM();								//load parameters stored in eeprom

	SysTick_Config((SystemCoreClock  * g_parameters.dt));		//configure the systick timer

	motors_init();											//initialise all motors

	PID_reset_all();											//reset pid internals
}



void SysTick_Handler(void)
{
	systick_happened += 1;
}
