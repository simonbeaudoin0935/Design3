#include "../../inc/Motor/PID.h"
#include "../../inc/Motor/Motor.h"
#include "../../inc/define.h"


#include "stm32f4xx.h"




//// VKp, VKi et VKd sont définis statiquement par des « #define »
//// PID et Encodeur sont des structures globales
//void PID_Recalc(void) {
//// Acquisition des données et mesure de l’erreur
//PID.vitesse = Encodeur.position - PID.position_old ; // Exprimé en « pas par DeltaT »
//PID.position_old = Encodeur.position ;
//// Mesure de l’erreur
//PID.erreur_old = PID.erreur ;
//PID.erreur = PID.consigne_vitesse - PID.vitesse ;
//// Calcul du nombre dérivé (sauf le terme 1/DeltaT intégré dans VKd)
//PID.derive = PID.erreur - PID.erreur_old ;
//// Calcul du terme intégral (sauf le terme DeltaT intégré dans VKi)
//PID.integral += PID.erreur ;
//// Calcul de la nouvelle commande
//PID.pid = VKp*PID.erreur + VKi*PID.integral + VKd*PID.derivee ;
//// Actualisation de la PWM envoyée au moteur
//Moteur_PWM(PID.pid) ;
//}


//// Appelé par interruption 3 tous les DeltaT
//// PID et Encodeur sont des structures globales, PKp, PKi, PKd, Amax et Vmax sont définis statiquement
//// T est une variable temporelle
//void ProfilVitesse() {
//PID.consigne_vitesse_old = PID.consigne_vitesse ; // Sauvegarde de l’ancienne consigne
//PID.erreur_position_old = PID.erreur_position ;
//// Sauvegarde de l’ancienne erreur
//PID.erreur_position = PID.consigne_position - Encodeur.position ;
//// Calcul de la nouvelle erreu
//PID.integral_position += PID.erreur_position ;
//// Recalcul de l’intégrale
//PID.consigne_vitesse = PKp*PID.erreur_position + PKi*PID.integral_position + PKd*(PID.erreur_posi
//// Écrêtage de la vitesse
//if (PID.consigne_vitesse > Vmax) {
//PID.consigne_vitesse = Vmax ;
//} else if (PID.consigne_vitesse < -Vmax) {
//PID.consigne_vitesse = -Vmax ;
//}
//// Écrêtage de l’accélération
//if ((PID.consigne_vitesse - PID.consigne_vitesse_old) > Amax) {
//PID.consigne_vitesse = PID.consigne_vitesse_old + Amax ;
//} else if ((PID.consigne_vitesse - PID.consigne_vitesse_old) < -Amax) {
//PID.consigne_vitesse = PID.consigne_vitesse_old - Amax ;
//}
//PID_Recalc() ;
//}

typedef struct{
	float angular_position;
	float position;
}Encodeur_t;


typedef struct{

	float position;
	float position_old;

	float vitesse;
	float vitesse_old;


	float consigne_position;

	float consigne_vitesse;
	float consigne_vitesse_old;

	float erreur_position;
	float erreur_position_old;

	float erreur_vitesse;
	float erreur_vitesse_old;

	float integral_position;
	float integral_vitesse;

	float acceleration;

	float pid;
}PID_t;

Encodeur_t encodeur_1;

PID_t PID_1;
PID_t PID_2;
PID_t PID_3;
PID_t PID_4;



void PID_reset(void){
	encodeur_1.angular_position = 0.0;
	encodeur_1.position         = 0.0;


	PID_1.consigne_position     = 5.0;

	PID_1.consigne_vitesse      = 0.0;
	PID_1.consigne_vitesse_old  = 0.0;

	PID_1.erreur_position       = 0.0;
	PID_1.erreur_position_old   = 0.0;

	PID_1.erreur_vitesse        = 0.0;
	PID_1.erreur_vitesse_old    = 0.0;

	PID_1.integral_position     = 0.0;
	PID_1.integral_vitesse      = 0.0;

	PID_1.pid                   = 0.0;

	PID_1.position              = 0.0;
	PID_1.position_old          = 0.0;

	PID_1.vitesse               = 0.0;
	PID_1.vitesse_old           = 0.0;


}


void PID_compute(void){

	uint16_t motor_1_tick = TIM1->CNT;
	TIM1->CNT = 32762;

	int motor_1_delta_tick = (int) motor_1_tick - 32762;
	encodeur_1.angular_position += TICK_TO_ROTATION(motor_1_delta_tick);
	encodeur_1.position = ROTATION_TO_CM(encodeur_1.angular_position);

//	uint16_t motor_1_tick = TIM1->CNT;
//	TIM1->CNT = 32762;
//	uint16_t motor_2_tick = TIM2->CNT;
//	TIM2->CNT = 32762;
//	uint16_t motor_3_tick = TIM3->CNT;
//	TIM3->CNT = 32762;
//	uint16_t motor_4_tick = TIM4->CNT;
//	TIM4->CNT = 32762;
//
//	PID_1.position += ((float)((int)motor_1_tick - 32762)) * TICK_TO_CM;
//	PID_1.position += ((float)((int)motor_2_tick - 32762)) * TICK_TO_CM;
//	PID_1.position += ((float)((int)motor_3_tick - 32762)) * TICK_TO_CM;
//	PID_1.position += ((float)((int)motor_4_tick - 32762)) * TICK_TO_CM;
//
//	PID_1.consigne_vitesse_old = PID_1.consigne_vitesse;
//	PID_1.erreur_position_old  = PID_1.erreur_position;
//	PID_1.erreur_position      = PID_1.consigne_position - PID_1.position;
//	PID_1.integral_position   += PID_1.erreur_position;
//	float derivee_erreur_position = (PID_1.erreur_position - PID_1.erreur_position_old) / CONTROL_LOOP_INTERVAL;
//	PID_1.consigne_vitesse     = PKp * PID_1.erreur_position +
//								 PKi * PID_1.integral_position   +
//								 PKd * derivee_erreur_position;
//
//	if(PID_1.consigne_vitesse > Vmax){
//		PID_1.consigne_vitesse = Vmax;
//	}else if(PID_1.consigne_vitesse < - Vmax){
//		PID_1.consigne_vitesse = - Vmax;
//	}
//
//	PID_1.acceleration = (PID_1.vitesse - PID_1.vitesse_old)  / CONTROL_LOOP_INTERVAL;
//
////	if(PID_1.acceleration > Amax){
////		PID_1.consigne_vitesse = PID_1.consigne_vitesse_old + Amax;
////	}else if(PID_1.acceleration < - Amax){
////		PID_1.consigne_vitesse = PID_1.consigne_vitesse_old - Amax;
////	}
//
//	PID_1.vitesse = (PID_1.position - PID_1.position_old) / CONTROL_LOOP_INTERVAL;
//	PID_1.position_old = PID_1.position;
//
//	PID_1.erreur_vitesse_old = PID_1.erreur_vitesse;
//	PID_1.erreur_vitesse = PID_1.consigne_vitesse - PID_1.vitesse;
//
//	float derivee_vitesse = (PID_1.erreur_vitesse - PID_1.erreur_vitesse_old) / CONTROL_LOOP_INTERVAL;
//	PID_1.integral_vitesse += PID_1.erreur_vitesse * CONTROL_LOOP_INTERVAL;
//	PID_1.pid = VKp * PID_1.erreur_vitesse +
//			    VKi * PID_1.integral_vitesse +
//				VKd * derivee_vitesse;
//
//
//	motor1_set_speed_percent(PID_1.pid);
}



